#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
from enaml.widgets.api import Container, Html
from enaml.core.api import Looper, Conditional
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import vertical, horizontal, align, spacer, vbox, hbox
from enaml.widgets.api import (
    Window, Label, Field, Form, DateSelector, CheckBox, GroupBox, Container,
    PushButton, Menu, Action, DockItem, ObjectCombo
)
from enamlx.widgets.table_view import (
    TableView, TableViewRow, TableViewItem
)

from zero.models.customer import Customer, Address
from zero.validators.phone_number import PhoneNumberValidator

enamldef AddressForm(Form): form:
    attr title: str = "Address"
    attr show_checkbox: bool = False
    attr address: Address
    attr other_address: Address
    attr use_other: bool << address == other_address
    Label:
        text << title
    Conditional:
        condition << show_checkbox
        CheckBox:
            text = "Same as billing address"
            checked := form.use_other
            checked :: 
                if change['value']:
                    form.address = other_address
                else:
                    form.address = Address()
    Conditional:
        condition << not show_checkbox
        Label:
            pass
    Label:
        text = "Street:"
    Field:
        text := address.street
        enabled << not use_other
    Label:
        text = "City:"
    Field:
        text := address.city
        enabled << not use_other
    Label:
        text = "Zipcode:"
    Field:
        text := address.zipcode
        enabled << not use_other
    Label:
        text = "State:"
    ObjectCombo:
        items << list(address.get_member('state').items)
        selected := address.state
        enabled << not use_other
        

enamldef CustomerForm(Container):
    attr customer: Customer
    attr show_employer: bool = True
    #constraints = [
        #hbox(c1, c2),
        #c1.width == c2.width,
            #vbox(
                #hbox(
                    #vbox(lbl_ttl, cmb_ttl),
                    #vbox(lbl_fn, fld_fn),
                    #vbox(lbl_mn, fld_mn),
                    #vbox(lbl_ln, fld_ln),
                    #vbox(lbl_sfx, cmb_sfx)),
                #lbl_dn, 
                #cmb_dn,
            #),
            #vbox(
                #lbl_em, 
                #fld_em,
                #lbl_ph, 
                #fld_ph,
            #)
        #)
    #]
    GroupBox:
        title = "Name"
        constraints =  [
            vbox(
                lbl_co, 
                fld_co,
                hbox(
                    vbox(lbl_ttl, cmb_ttl),
                    vbox(lbl_fn, fld_fn),
                    vbox(lbl_mn, fld_mn),
                    vbox(lbl_ln, fld_ln),
                    vbox(lbl_sfx, cmb_sfx)),
                lbl_dn, 
                cmb_dn,
            ),
        ]
        Label: lbl_co:
            text = "Company"
        Field: fld_co:
            text := customer.company
        Label: lbl_ttl:
            text = "Title"
        ObjectCombo: cmb_ttl:
            items << list(customer.get_member('title').items)
            selected := customer.title
        Label: lbl_fn:
            text = "First name:"
        Field: fld_fn:
            text := customer.first_name
        Label: lbl_mn:
            text = "Middle name:"
        Field: fld_mn:
            text := customer.middle_name
        Label: lbl_ln:
            text = "Last name:"
        Field: fld_ln:
            text := customer.last_name
        Label: lbl_sfx:
            text = "Suffix"
        ObjectCombo: cmb_sfx:
            items << list(customer.get_member('suffix').items)
            selected := customer.suffix
        Label: lbl_dn:
            text = "Display name as:"
        ObjectCombo: cmb_dn:
            items << list(customer.get_member('display_name_format').items) 
            selected := customer.display_name_format
            to_string << lambda fmt: fmt.format(
                    title=customer.title,
                    suffix=customer.suffix,
                    first_name=customer.first_name,
                    last_name=customer.last_name,
                    middle_name=customer.last_name
                ) 
    GroupBox: c2:
        constraints = [
            vbox(
                hbox(vbox(lbl_em, fld_em),
                     vbox(lbl_wb, fld_wb)),
                hbox(vbox(lbl_ph, fld_ph),
                     vbox(lbl_mb, fld_mb),
                     vbox(lbl_fx, fld_fx))
            ),
            lbl_wb.width == lbl_em.width,
            lbl_ph.width == lbl_mb.width,
            lbl_mb.width == lbl_fx.width,
        ]
        title = "Contact"
        Label: lbl_em:
            text = "Email:"
        Field: fld_em:
            text := customer.email
        Label: lbl_wb:
            text = "Website:"
        Field: fld_wb:
            text := customer.website
        Label: lbl_ph:
            text = "Phone:"
        Field: fld_ph:
            #validator = PhoneNumberValidator()
            text := customer.phone
        Label: lbl_mb:
            text = "Mobile:"
        Field: fld_mb:
            #validator = PhoneNumberValidator()
            text := customer.mobile
        Label: lbl_fx:
            text = "Fax:"
        Field: fld_fx:
            #validator = PhoneNumberValidator()
            text := customer.fax
    GroupBox: c3:
        title = "Address"
        constraints = [
            hbox(a1, a2),
            a1.width == a2.width,
        ]
        AddressForm: a1:
            title = "Billing"
            address << customer.billing_address
        AddressForm: a2:
            title = "Shipping"
            show_checkbox = True
            other_address << customer.billing_address
            address << customer.shipping_address or customer.billing_address
        #text ::
            #match = validator.proper.match(text)
            #if match:
                #area = match.group(1)
                #prefix = match.group(2)
                #suffix = match.group(3)
                #employee.phone = tuple(map(int, (area, prefix, suffix)))


enamldef CustomerView(Container): view:
    attr customer: Customer = Customer()
    CustomerForm:
        customer << view.customer


enamldef CustomerViewDockItem(DockItem):
    alias customer: view.customer
    name << 'customer-edit-{}'.format(customer.uuid)
    title << "Customer - {}".format(customer.name)
    CustomerView: view:
        pass


enamldef CustomerListView(Container): view:
    alias customers: table.items
    attr version: int = 1
    attr selected: set = set()
    
    func edit_item(customer):
        tag = 'customer-edit-{}'.format(customer.uuid)
        if not plugin.area.find(tag):
            item = CustomerViewDockItem(plugin.area, customer=customer)
            plugin.insert_item(item, target='company-view')
    
    TableView: table:
        horizontal_headers = ['', 'Customer', 'Company', 'Phone', 'Open Balance', 'Actions']
        horizontal_stretch = True
        show_vertical_header = False
        Looper:
            iterable << range(50)
            TableViewRow:
                row << table.visible_row+loop_index
                attr customer << table.items[self.row]
                double_clicked :: edit_item(customer)
                Menu:
                    Action:
                        text = "Edit customer"
                        triggered :: edit_item(customer)
                TableViewItem:
                    checkable = True
                    checked << customer in view.selected
                    checked :: 
                        s = set((customer,))
                        if change['value']:
                            view.selected = view.selected.union(s)
                        else:
                            view.selected = view.selected.difference(s)
                TableViewItem:
                    text << customer.display_name
                TableViewItem:
                    text << customer.company
                TableViewItem:
                    text << customer.phone or customer.mobile
                TableViewItem:
                    #: TODO: Configure
                    text << "${0:.2f}".format(customer.open_balance)
                    
    PushButton:
        text = 'New customer'
        clicked :: 
            customers = view.customers[:]
            customers.append(Customer(name="New customer"))
            view.customers = customers
            view.version += 1
            edit_item(customers[-1])
        
