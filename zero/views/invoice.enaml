#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
import re
import arrow
import pdfkit
from enaml.core.api import Looper, Conditional
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import vertical, horizontal, align, spacer, vbox, hbox
from enaml.widgets.api import (
    Window, Label, Field, Form, DateSelector, CheckBox, GroupBox, Container,
    PushButton, Menu, Action, DockItem, ObjectCombo, SpinBox, MultilineField,
    Html, Timer, WebView, FileDialogEx
) 
from enamlx.widgets.api import (
    TableView, TableViewRow, TableViewItem, DoubleSpinBox
)


from enaml.scintilla.api import Scintilla, ScintillaIndicator, ScintillaMarker
from enaml.scintilla.themes import THEMES
from enaml.applib.live_editor_model import LiveEditorModel

from zero.models.invoice import Invoice, InvoiceItem
from zero.utils import load_image


enamldef InvoiceForm(Container):
    attr invoice: Invoice
    GroupBox:
        constraints = [
            vbox(
                hbox(vbox(
                        hbox(lbl_num, lbl_num_val),
                        hbox(lbl_cust, cmb_cust)), spacer, vbox(lbl_bal_due, lbl_bal_due_value)),
                hbox(vbox(lbl_terms, cmb_terms),
                     vbox(lbl_date, fld_date),
                     vbox(lbl_due, fld_due), spacer)
            ),
            align('v_center', lbl_num, lbl_num_val, lbl_bal_due),
            align('v_center', lbl_cust, cmb_cust, lbl_bal_due_value),#, lbl_bal_due, lbl_bal_due_value),
        ]
        Label: lbl_num:
           text = "Invoice:"
        Label: lbl_num_val:
           text << '{}'.format(invoice.number)
        Label: lbl_bal_due:
            text = 'Balance Due:'
        Label: lbl_bal_due_value:
            text << '<span style=" font-size:24pt; font-weight:thin;">${0:.2f}</span>'.format(invoice.total_amount)
        Label: lbl_cust:
            text = "Customer:"
        ObjectCombo: cmb_cust:
            items << sorted(plugin.customers[:], key=lambda c:c.last_name+c.first_name)
            to_string << lambda c: c.display_name
            selected := invoice.customer
        Label: lbl_terms:
            text = "Terms:"
        ObjectCombo: cmb_terms:
            items << list(invoice.get_member('terms').items)
            selected := invoice.terms
        Label: lbl_date:
            text = "Date:"
        DateSelector: fld_date:
            date << invoice.date.datetime.date()
            date :: invoice.date = arrow.get(change['value'])
        Label: lbl_due:
            text = "Due:"
        DateSelector: fld_due:
            date << invoice.due_date.datetime.date()
            date :: invoice.due_date = arrow.get(change['value'])
    TableView: table:
        attr version: int = 1
        attr selected: set = set()
        horizontal_headers = ['', 'Product / Service', 'Description', 'Qty', 'Rate', 'Amount']
        horizontal_stretch = True
        show_vertical_header = False
        items << invoice.items[:]
        Looper:
            iterable << range(50)
            TableViewRow:
                row << table.visible_row+loop_index
                attr line_item << table.items[self.row] if self.row < len(table.items) else InvoiceItem()
                Menu:
                    Action:
                        text = "Remove item"
                        enabled << bool(invoice.items)
                        triggered :: 
                            invoice.items = [i for i in invoice.items 
                                                if i != line_item]
                            
                TableViewItem:
                    checkable = True
                    checked << line_item in table.selected
                    checked :: 
                        s = set((line_item,))
                        if change['value']:
                            table.selected = table.selected.union(s)
                        else:
                            table.selected = table.selected.difference(s)
                TableViewItem:
                    editable = True
                    text := line_item.name
                TableViewItem:
                    editable = True
                    text := line_item.description
                TableViewItem:
                    editable = True
                    text << "{}".format(line_item.quantity)
                    text :: 
                        try:
                            line_item.quantity = float(change['value'])
                        except ValueError:
                            pass
                TableViewItem:
                    editable = True
                    text << "${0:.2f}".format(line_item.rate)
                    text :: 
                        try:
                            line_item.rate = float(change['value'].strip("$"))
                        except ValueError:
                            pass
                TableViewItem:
                    text << "${0:.2f}".format(line_item.amount)
    Container:
        constraints = [
            vbox( 
                hbox(btn_add, btn_clear, spacer, lbl_amnt, lbl_amnt_value),
                lbl_cmts,
                fld_cmts,
            )
        ]
        PushButton: btn_add:
            text = "Add item"
            clicked :: invoice.items.append(InvoiceItem())
        PushButton: btn_clear:
            text = "Clear all items"
            clicked :: 
                # TODO: Prompt to verify
                invoice.items = []
        Label: lbl_amnt:
            text = "<b>Total</b>"
        Label: lbl_amnt_value:
            text << "<b>${0:.2f}</b>".format(invoice.total_amount)
        Label: lbl_cmts:
            text = "Comments"
        MultilineField: fld_cmts:
            text := invoice.notes
    

enamldef InvoiceView(Container):
    attr invoice: Invoice = Invoice()
    InvoiceForm:
        invoice << parent.invoice
    PushButton:
        text = "Preview"
        clicked :: 
            tag = 'invoice-preview-{}'.format(invoice.uuid)
            if not plugin.area.find(tag):
                item = InvoicePreviewDockItem(plugin.area, invoice=invoice)
                plugin.insert_item(item, target='invoice-list')


enamldef InvoiceDesignerDockItem(DockItem): view:
    attr invoice: Invoice
    name << 'invoice-designer-{}'.format(invoice.uuid)
    title << "Design Invoice - {}".format(invoice.number)
    attr model = LiveEditorModel(
        #model_text=',
        model_item='InvoiceModel',
        model_filename='invoice.py',
        view_item='InvoiceTemplate',
        view_filename='invoice.enaml',
    )
    func create_indicators(traceback):
        results = []
        try:
            for line in traceback.split("\n"):
                line = line.strip()
                if 'invoice.enaml' not in line:
                    continue
                m = re.search(r"line (\d+)", line)
                if not m:
                    continue
                try:
                    l = int(m.group(1))
                except ValueError:
                    continue

                start = (l-1, 0)
                stop = (l, 0)
                color = "#FFFF00"
                try:
                    color = "#FF0000"
                    c = int(tag[2])
                    start = (l-1, 0)
                    stop = (l-1, c)
                except:
                    pass
                results.append(ScintillaIndicator(
                    start=start, stop=stop, style="squiggle", color=color,
                ))
        except Exception as e:
            print(e)
        return results
        
    Container:
        Scintilla: editor:
            settings = {
                "tab_width": 4,
                "use_tabs": False,
                "indent": 4,
                "tab_indents": True,
                "auto_indent": True,
                "backspace_unindents": True,
                "autocompletion_threshold": 3,
                "show_line_numbers": True,
            }
            syntax = 'enaml'
            theme << THEMES['friendly']
            activated :: 
                with open('zero/templates/invoice.enaml') as f:
                    model.view_text = f.read()
                    set_text(model.view_text)
            indicators << create_indicators(model.traceback)
            markers << [ScintillaMarker(
                        line=i.start[0],
                        image=load_image("exclamation" if i.color=="#FF0000"
                                         else "error"))
                        for i in indicators]
            text_changed :: timer.start()
            Timer: timer:
                interval = 350
                single_shot = True
                timeout ::
                    setattr(model,'view_text', str(editor.get_text()))
                    try:
                        view = model.compiled_view
                        view.invoice = invoice
                        invoice.view = view
                    except Exception as e:
                        print(e)
        Html:
            source << f"<pre>{model.traceback or 'No errors'}</pre>"

        

enamldef InvoicePreviewDockItem(DockItem): view:
    attr invoice: Invoice
    name << 'invoice-preview-{}'.format(invoice.uuid)
    title << "Preview Invoice - {}".format(invoice.number)
    
    Container:
        constraints = [
            vbox(web_view,
                 hbox(btn_dl, spacer, btn_design),
            )
        ]
        WebView: web_view:
            html << invoice.view.render() if invoice.view.version else "<p>Template missing</p>"
        PushButton: btn_dl:
            text = "Save as pdf"
            clicked :: 
                # Save as pdf
                name = f'invoice-{invoice.number}.pdf'
                path = FileDialogEx.get_save_file_name(
                    self, current_path=name, name_filters=['*.pdf'])
                if path:
                    pdfkit.from_string(web_view.html, path)
                    
        PushButton: btn_design:
            text = "Open designer"
            clicked :: 
                tag = 'invoice-design-{}'.format(invoice.uuid)
                if not plugin.area.find(tag):
                    item = InvoiceDesignerDockItem(plugin.area, invoice=invoice)
                    plugin.insert_item(item, target='company-view')


enamldef InvoiceViewDockItem(DockItem): view:
    attr invoice: Invoice
    name << 'invoice-edit-{}'.format(invoice.uuid)
    title << "Invoice - {}".format(invoice.number)
    InvoiceView:
        invoice << view.invoice


enamldef InvoiceListView(Container): view:
    alias invoices: table.items
    attr version: int = 1
    attr selected: set = set()
    
    func edit_item(invoice):
        tag = 'invoice-edit-{}'.format(invoice.uuid)
        if not plugin.area.find(tag):
            item = InvoiceViewDockItem(plugin.area, invoice=invoice)
            plugin.insert_item(item, target='company-view')
    
    TableView: table:
        horizontal_headers = ['', 'Number', 'Date', 'Customer', 'Amount']
        horizontal_stretch = True
        show_vertical_header = False
        Looper:
            iterable << range(100)
            TableViewRow:
                row << table.visible_row+loop_index
                attr invoice << table.items[self.row]
                double_clicked :: edit_item(invoice)
                Menu:
                    Action:
                        text = "Edit invoice"
                        triggered :: edit_item(invoice)
                TableViewItem:
                    checkable = True
                    checked << invoice in view.selected
                    checked :: 
                        s = set((invoice,))
                        if change['value']:
                            view.selected = view.selected.union(s)
                        else:
                            view.selected = view.selected.difference(s)
                TableViewItem:
                    text << str(invoice.number)
                TableViewItem:
                    text << invoice.date.strftime("%c")
                TableViewItem:
                    text << invoice.customer.name if invoice.customer else ''
                TableViewItem:
                    #: TODO: Configure
                    text << "${0:.2f}".format(invoice.total_amount)
                    
    PushButton:
        text = 'New invoice'
        clicked :: 
            invoices = view.invoices[:]
            invoices.append(Invoice(owner=plugin.company))
            view.invoices = invoices
            view.version += 1
            edit_item(invoices[-1])
