"""
Copyright (c) 2018, Jairus Martin.

Distributed under the terms of the AGPL v3 License.

The full license is in the file LICENSE, distributed with this software.
"""
from enaml.widgets.api import Container, Html
from enaml.core.api import Looper, Conditional
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup
from enaml.layout.api import spacer, vbox, hbox
from enaml.widgets.api import (
    Window, Label, Field, Form, DateSelector, CheckBox, GroupBox, Container,
    PushButton, Menu, Action, ObjectCombo
)
from enamlx.widgets.table_view import (
    TableView, TableViewRow, TableViewItem
)

from zerobooks.models.api import System, Customer, Address
from zerobooks.utils import DockItem, safe_search, load_icon

from .address import AddressForm
        

enamldef CustomerForm(Container):
    # sys_config: System is a DockArea global
    attr customer: Customer = Customer()
    attr show_employer: bool = True

    async func save():
        if customer:
            billing_address = customer.billing_address
            if billing_address:
                await billing_address.save()
            shipping_address = customer.shipping_address
            if shipping_address and shipping_address != billing_address:
                await shipping_address.save()
            await customer.save()

            if customer.internal:
                notification("Company details saved!")
            else:
                notification(f"Customer '{customer.display_name}' saved!")

    #constraints = [
        #hbox(c1, c2),
        #c1.width == c2.width,
            #vbox(
                #hbox(
                    #vbox(lbl_ttl, cmb_ttl),
                    #vbox(lbl_fn, fld_fn),
                    #vbox(lbl_mn, fld_mn),
                    #vbox(lbl_ln, fld_ln),
                    #vbox(lbl_sfx, cmb_sfx)),
                #lbl_dn, 
                #cmb_dn,
            #),
            #vbox(
                #lbl_em, 
                #fld_em,
                #lbl_ph, 
                #fld_ph,
            #)
        #)
    #]
    GroupBox:
        title = "Name"
        constraints =  [
            vbox(
                lbl_co, 
                fld_co,
                hbox(
                    vbox(lbl_ttl, cmb_ttl),
                    vbox(lbl_fn, fld_fn),
                    vbox(lbl_mn, fld_mn),
                    vbox(lbl_ln, fld_ln),
                    vbox(lbl_sfx, cmb_sfx)),
                lbl_dn, 
                cmb_dn,
            ),
        ]
        Label: lbl_co:
            text = "Company"
        Field: fld_co:
            text := customer.company
        Label: lbl_ttl:
            text = "Title"
        ObjectCombo: cmb_ttl:
            items << [''] + list(sys_config.name_prefixes.keys())
            selected := customer.title
        Label: lbl_fn:
            text = "First name:"
        Field: fld_fn:
            text := customer.first_name
        Label: lbl_mn:
            text = "Middle name:"
        Field: fld_mn:
            text := customer.middle_name
        Label: lbl_ln:
            text = "Last name:"
        Field: fld_ln:
            text := customer.last_name
        Label: lbl_sfx:
            text = "Suffix"
        ObjectCombo: cmb_sfx:
            items << [''] + list(sys_config.name_suffixes.keys())
            selected := customer.suffix
        Label: lbl_dn:
            text = "Display name as:"
        ObjectCombo: cmb_dn:
            items << [''] + sys_config.display_name_formats
            selected := customer.display_name_format
            to_string << lambda fmt: fmt.format(
                    title=customer.title,
                    suffix=customer.suffix,
                    first_name=customer.first_name,
                    last_name=customer.last_name,
                    middle_name=customer.last_name,
                    company=customer.company,
                    email=customer.email,
                    phone=customer.phone
                ) 
    GroupBox: c2:
        constraints = [
            vbox(
                hbox(vbox(lbl_em, fld_em),
                     vbox(lbl_wb, fld_wb)),
                hbox(vbox(lbl_ph, fld_ph),
                     vbox(lbl_mb, fld_mb),
                     vbox(lbl_fx, fld_fx))
            ),
            lbl_wb.width == lbl_em.width,
            lbl_ph.width == lbl_mb.width,
            lbl_mb.width == lbl_fx.width,
        ]
        title = "Contact"
        Label: lbl_em:
            text = "Email:"
        Field: fld_em:
            text := customer.email
        Label: lbl_wb:
            text = "Website:"
        Field: fld_wb:
            text := customer.website
        Label: lbl_ph:
            text = "Phone:"
        Field: fld_ph:
            #validator = PhoneNumberValidator()
            text := customer.phone
        Label: lbl_mb:
            text = "Mobile:"
        Field: fld_mb:
            #validator = PhoneNumberValidator()
            text := customer.mobile
        Label: lbl_fx:
            text = "Fax:"
        Field: fld_fx:
            #validator = PhoneNumberValidator()
            text := customer.fax
    GroupBox: c3:
        title = "Address"
        constraints = [
            hbox(a1, a2),
            a1.width == a2.width,
        ]
        AddressForm: a1:
            title = "Billing"
            address << customer.billing_address
        AddressForm: a2:
            title = "Shipping"
            show_checkbox = True
            other_address << customer.billing_address
            address << customer.shipping_address or customer.billing_address
        #text ::
            #match = validator.proper.match(text)
            #if match:
                #area = match.group(1)
                #prefix = match.group(2)
                #suffix = match.group(3)
                #employee.phone = tuple(map(int, (area, prefix, suffix)))
    PushButton:
        text = "Save"
        clicked :: app.deferred_call(save())


enamldef CustomerView(Container): view:
    alias customer: form.customer
    CustomerForm: form:
        padding = 0


enamldef CustomerViewDockItem(DockItem):
    alias customer: view.customer
    name << f'customer-edit-{customer.uuid}'
    title << f"Customer - {customer.display_name}"

    save_state => ():
        default = DockItem.save_state(self)
        default["customer"] = self.customer
        return default

    CustomerView: view:
        pass


enamldef CustomerListView(Container): view:
    attr customers: list = []
    attr version: int = 1
    attr selected: set = set()

    func add_item():
        customers = self.customers[:]
        customers.append(Customer(name="New customer"))
        self.customers = customers
        self.version += 1
        edit_item(customers[-1])
    
    func edit_item(customer: Customer) -> CustomerViewDockItem:
        if item := plugin.area.find(f"customer-edit-{customer.uuid}"):
            return item
        item = CustomerViewDockItem(plugin.area, customer=customer)
        plugin.insert_item(item, target='company-view')
        return item
    
    func queryset(items, text):
        if not text:
            return items
        qs = []
        q = text.lower().replace("=", "==")
        for item in items:
            #: WARN: Security issue
            #: TODO Parse to ast, but dilligaf for now
            scope = {'name': item.name.lower(), 'company': item.company.lower(),
                     'phone': item.phone}
            try:
                if safe_search(scope, q):
                    qs.append(item)
            except Exception as e:
                workbench.message_warning("Search error", f"Search is invalid: {e}")
                return qs
        return qs

    constraints = [
        vbox(search, hbox(item_count, spacer, add_btn), table)
    ]

    Field: search:
        placeholder = 'Filters... ex "John" in name or number = 10000'
    Label: item_count:
        text << f"Showing {len(table.items)} of {len(customers)}"
    PushButton: add_btn:
        text = 'New customer'
        icon = load_icon("vcard_add")
        clicked :: add_item()
    TableView: table:
        horizontal_headers = ['Name', 'Company', 'Phone', 'Open Balance', 'Total Spend', 'Created']
        horizontal_stretch = True
        horizontal_sizes = [200, 200, 100, 100, 100, 200]
        show_vertical_header = False
        items << queryset(customers, search.text)
        Looper:
            iterable << range(50)
            TableViewRow:
                row << table.visible_row+loop_index
                attr customer << table.items[self.row] if self.row < len(table.items) else Customer()
                double_clicked :: edit_item(customer)
                Menu:
                    Action:
                        text = "Edit customer"
                        triggered :: edit_item(customer)
                TableViewItem:
                    checkable = True
                    checked << customer in view.selected
                    checked :: 
                        s = {customer}
                        if change['value']:
                            view.selected = view.selected.union(s)
                        else:
                            view.selected = view.selected.difference(s)
                    text << customer.display_name
                TableViewItem:
                    text << customer.company
                TableViewItem:
                    text << customer.phone or customer.mobile
                TableViewItem:
                    text << "${0:,.2f}".format(customer.open_balance)
                TableViewItem:
                    text << "${0:,.2f}".format(customer.total_spend)
                TableViewItem:
                    text << customer.created.strftime("%c")
                    
